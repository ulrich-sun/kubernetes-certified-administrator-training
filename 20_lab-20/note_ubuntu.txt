# install_kubernetes_v1.33.sh
#!/bin/bash

################ Installation de Kubeadm ###################

### On master - https://v1-33.docs.kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

# D√©sactivation du swap
swapoff -a
sed -i '/ swap / s/^/#/' /etc/fstab

# Chargement des modules requis
cat <<EOF | tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF

modprobe br_netfilter

# Param√®tres sysctl requis par Kubernetes
cat <<EOF | tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

sysctl --system

# Installation des d√©pendances
apt-get update
apt-get install -y apt-transport-https ca-certificates curl gpg

# Ajout de la cl√© GPG du d√©p√¥t Kubernetes 
mkdir -p /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# Ajout du d√©p√¥t Kubernetes v1.33
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /" > /etc/apt/sources.list.d/kubernetes.list

# Mise √† jour des paquets
apt-get update

# Installation de kubelet, kubeadm, kubectl en version 1.33.0-1.1
VERSION=1.33.0-1.1
apt-get install -y kubelet=${VERSION} kubeadm=${VERSION} kubectl=${VERSION}

# Emp√™cher leur mise √† jour automatique
apt-mark hold kubelet kubeadm kubectl

# Installation de containerd
apt-get install -y containerd

# üîß V√©rification et configuration de containerd pour utiliser SystemdCgroup
mkdir -p /etc/containerd
containerd config default | tee /etc/containerd/config.toml > /dev/null

sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

# Red√©marrage de containerd pour appliquer la config
systemctl restart containerd

# Activer et d√©marrer kubelet
systemctl enable --now kubelet

# üî• D√©sactivation du firewall UFW (√† d√©sactiver temporairement si activ√©)
if systemctl is-active --quiet ufw; then
    systemctl stop ufw
    systemctl disable ufw
    echo "üî• Firewall UFW d√©sactiv√© pour √©viter les blocages de r√©seau Kubernetes."
fi

# Charger les r√®gles r√©seau n√©cessaires
echo 1 > /proc/sys/net/ipv4/ip_forward
echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables
echo 1 > /proc/sys/net/bridge/bridge-nf-call-ip6tables

### On worker

# Les commandes ci-dessus sont identiques √† ex√©cuter sur les n≈ìuds workers.
# R√©p√©tez l'ex√©cution compl√®te de ce script sur chaque worker pour assurer une configuration coh√©rente.

# Fin de l'installation kubeadm/kubelet/kubectl pour master et worker sous Ubuntu


# kubeadm init sur le master
# kubeadm join pour les workers
# installation de Flannel avec interface enp0s8
# üî∑ configure_cluster_k8s_v1.33.sh

#!/bin/bash

################ Cr√©ation du cluster ###################

### √Ä ex√©cuter uniquement sur le master node

# Initialisation du cluster (remplace 192.168.99.10 par l'adresse IP de l'interface r√©seau du master, ex: enp0s8)
kubeadm init --apiserver-advertise-address=192.168.99.10 --pod-network-cidr=10.244.0.0/16

# Configuration kubectl pour l‚Äôutilisateur courant
mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config

# V√©rification de l'√©tat du cluster
kubectl get nodes
kubectl get pods -n kube-system

# Installation de Flannel avec interface r√©seau personnalis√©e (Ajout√© par ChatGPT)
flannel_manifest=https://raw.githubusercontent.com/flannel-io/flannel/v0.24.2/Documentation/kube-flannel.yml
curl ${flannel_manifest} | sed '/kube-subnet-mgr.*/a\\        - --iface=enp0s8' | kubectl apply -f -

# V√©rification de Flannel
kubectl get pods -n kube-flannel
kubectl get nodes
kubectl get pods -n kube-system

# üí° Affichage de la commande kubeadm join (√† copier sur les workers)
echo "Command to join worker nodes:"
kubeadm token create --print-join-command

### √Ä ex√©cuter sur chaque worker node une fois kubeadm init termin√© et les tokens connus

# Remplacer les valeurs <token> et <sha> par celles affich√©es √† la fin de kubeadm init
# Exemple : kubeadm join 192.168.99.10:6443 --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:xxxxxxxxxxxxxxxxxxxx
# kubeadm join <ip-master>:6443 --token <token> --discovery-token-ca-cert-hash <sha>

# Apr√®s le join :
# V√©rifier sur le master :
# kubectl get nodes
